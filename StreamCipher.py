# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

import os

def xor_bytes(data, key_stream):
    """
    Performs a bitwise XOR operation between two byte sequences.
    """
    return bytes(a ^ b for a, b in zip(data, key_stream))

def encrypt(plaintext, key):
    """
    Encrypts plaintext using a stream cipher with a given key.
    The key is used to generate a keystream of the same length as the plaintext.
    """
    if len(key) < len(plaintext):
        # For a truly random keystream, the key should be at least as long as the plaintext.
        # For simplicity, this example reuses the key if it's shorter.
        # In a real-world scenario, a PRNG would extend the key.
        keystream = (key * ((len(plaintext) // len(key)) + 1))[:len(plaintext)]
    else:
        keystream = key[:len(plaintext)]

    ciphertext = xor_bytes(plaintext, keystream)
    return ciphertext

def decrypt(ciphertext, key):
    """
    Decrypts ciphertext using a stream cipher with the same key used for encryption.
    """
    if len(key) < len(ciphertext):
        keystream = (key * ((len(ciphertext) // len(key)) + 1))[:len(ciphertext)]
    else:
        keystream = key[:len(ciphertext)]

    plaintext = xor_bytes(ciphertext, keystream)
    return plaintext

# Example Usage:
message = "This is a secret message in Greek: Γεια σας!"
secret_key = b"mysecretkey123" # Key must be bytes

# Convert message to bytes for encryption
message_bytes = message.encode('utf-8')

# Encrypt the message
encrypted_message = encrypt(message_bytes, secret_key)
print(f"Encrypted: {encrypted_message}")

# Decrypt the message
decrypted_message_bytes = decrypt(encrypted_message, secret_key)

# Convert decrypted bytes back to string
decrypted_message = decrypted_message_bytes.decode('utf-8')
print(f"Decrypted: {decrypted_message}")

