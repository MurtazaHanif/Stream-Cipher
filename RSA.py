# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

!pip install pycryptodome

import random

# Function to calculate the greatest common divisor
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Function to find modular inverse
def mod_inverse(e, phi):
    for d in range(1, phi):
        if (e * d) % phi == 1:
            return d
    return None

# Function to generate keys
def generate_keys():
    # Two random prime numbers
    p = 61
    q = 53
    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose e such that 1 < e < phi and gcd(e, phi) = 1
    e = random.choice([x for x in range(2, phi) if gcd(x, phi) == 1])

    # Calculate d (modular inverse of e)
    d = mod_inverse(e, phi)

    # Public and private keys
    public_key = (e, n)
    private_key = (d, n)

    return public_key, private_key

# Function to encrypt a message
def encrypt(public_key, plaintext):
    e, n = public_key
    ciphertext = [(ord(char) ** e) % n for char in plaintext]
    return ciphertext

# Function to decrypt a message
def decrypt(private_key, ciphertext):
    d, n = private_key
    plaintext = ''.join([chr((char ** d) % n) for char in ciphertext])
    return plaintext

# Example usage
public_key, private_key = generate_keys()
print("Public Key:", public_key)
print("Private Key:", private_key)

message = "HELLO"
print("Original Message:", message)

encrypted_message = encrypt(public_key, message)
print("Encrypted Message:", encrypted_message)

decrypted_message = decrypt(private_key, encrypted_message)
print("Decrypted Message:", decrypted_message)

#######################################################
Public Key: (2519, 3233)
Private Key: (2279, 3233)
Original Message: HELLO
Encrypted Message: [2185, 2219, 2680, 2680, 1969]
Decrypted Message: HELLO